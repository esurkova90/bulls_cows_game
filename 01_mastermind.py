# -*- coding: utf-8 -*-

# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В этом модуле нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем делать в текущем модуле. Представьте, что движок игры могут использовать
# разные клиенты - веб, чатбот, приложение, етс - они знают как спрашивать и отвечать пользователю.
# Движок игры реализует только саму функциональность игры.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT

# -*- coding: utf-8 -*-
# TODO - Порядок импортов важен.
#  импорты из стандартной библиотеки
#  импорты сторонних библиотек
#  импорты модулей текущего проекта
from termcolor import cprint, colored
from mastermind_engine import make_the_number, check_the_number


def game():
    motions_count = 0
    make_the_number()
    while True:
        motions_count += 1
        user_input = input(colored("Введите четырехзначное число: ", color="red"))
        gamer_number = list(user_input)
        if len(user_input) != 4:
            print("Некорректно введен номер, попробуйте еще раз")
        else:
            bulls, cows = check_the_number(gamer_number=gamer_number)
            if bulls == 4:
                break
            else:
                cprint("Быки - {}".format(bulls), color="yellow")
                cprint("Коровы - {}".format(cows), color="yellow")
    cprint("Количество ходов: {}".format(motions_count), color="blue")


while True:
    game()
    user_answer = input(colored("Хотите еще партию? ", color="blue"))
    if user_answer.lower() not in ('да', 'yes'):
        break

# зачёт!
